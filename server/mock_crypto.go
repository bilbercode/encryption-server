// Code generated by MockGen. DO NOT EDIT.
// Source: ./../../libcrypto/interface.go

// Package handler is a generated GoMock package.
package server

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	"github.com/bilbercode/encryption-server/libcrypto"
)

// MockCrypto is a mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockCrypto) Encrypt(data []byte) (libcrypto.EncryptionResult, error) {
	ret := m.ctrl.Call(m, "Encrypt", data)
	ret0, _ := ret[0].(libcrypto.EncryptionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockCryptoMockRecorder) Encrypt(data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCrypto)(nil).Encrypt), data)
}

// Decrypt mocks base method
func (m *MockCrypto) Decrypt(data, key []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Decrypt", data, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockCryptoMockRecorder) Decrypt(data, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCrypto)(nil).Decrypt), data, key)
}

// HashIdWithKey mocks base method
func (m *MockCrypto) HashIdWithKey(id string, key []byte) libcrypto.Hash {
	ret := m.ctrl.Call(m, "HashIdWithKey", id, key)
	ret0, _ := ret[0].(libcrypto.Hash)
	return ret0
}

// HashIdWithKey indicates an expected call of HashIdWithKey
func (mr *MockCryptoMockRecorder) HashIdWithKey(id, key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashIdWithKey", reflect.TypeOf((*MockCrypto)(nil).HashIdWithKey), id, key)
}
